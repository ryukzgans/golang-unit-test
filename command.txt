# Menjalankan Unit Test
Untuk menjalankan unit test kita bisa menggunakan perintah : 
~ go test
Jika kita ingin lihat lebih detail function test apa saja yang sudah di running, kita bisa gunakan perintah : 
~ go test -v
Dan jika kita ingin memilih function unit test mana yang ingin di running, kita bisa gunakan perintah : 
~ go test -v -run TestNamaFunction

# Menjalankan Semua Unit Test
Jika kita ingin menjalankan semua unit test dari top folder module nya, kita bisa gunakan perintah :
go test ./...

# Menggagalkan Unit Test
Terdapat function Fail(), FailNow(), Error() dan Fatal() jika kita ingin menggagalkan unit test
- Fail() akan menggagalkan unit test, namun tetap melanjutkan eksekusi unit test. Namun diakhir ketika selesai, maka unit test tersebut dianggap gagal
- FailNow() akan menggagalkan unit test saat ini juga, tanpa melanjutkan eksekusi unit test
- Error() function lebih seperti melakukan log (print) error, namun setelah melakukan log error, dia akan secara otomatis memanggil function Fail(), sehingga mengakibatkan unit test dianggap gagal
  Namun karena hanya memanggil Fail(), artinya eksekusi unit test akan tetap berjalan sampai selesai
- Fatal() mirip dengan Error(), hanya saja, setelah melakukan log error, dia akan memanggil FailNow(), sehingga mengakibatkan eksekusi unit test berhenti

# testing.M
- Untuk mengatur ekeskusi unit test, kita cukup membuat sebuah function bernama TestMain dengan parameter testing.M
- Jika terdapat function TestMain tersebut, maka secara otomatis Go-Lang akan mengeksekusi function ini tiap kali akan menjalankan unit test di sebuah package
- Dengan ini kita bisa mengatur Before dan After unit test sesuai dengan yang kita mau
- Ingat, function TestMain itu dieksekusi hanya sekali per Go-Lang package, bukan per tiap function unit test

# Menjalankan Hanya Sub Test
Kita sudah tahu jika ingin menjalankan sebuah unit test function, kita bisa gunakan perintah :
~ go test -run TestNamaFunction
Jika kita ingin menjalankan hanya salah satu sub test, kita bisa gunakan perintah :
~ go test -run TestNamaFunction/NamaSubTest 
Atau untuk semua test semua sub test di semua function, kita bisa gunakan perintah :
~ go test -run /NamaSubTest

# Benchmark
- Selain unit test, Go-Lang testing package juga mendukung melakukan benchmark
- Benchmark adalah mekanisme menghitung kecepatan performa kode aplikasi kita
- Benchmark di Go-Lang dilakukan dengan cara secara otomatis melakukan iterasi kode yang kita panggil berkali-kali sampai waktu tertentu
- Kita tidak perlu menentukan jumlah iterasi dan lamanya, karena itu sudah diatur oleh testing.B bawaan dari testing package

# testing.B
- testing.B adalah struct yang digunakan untuk melakukan benchmark. 
- testing.B mirip dengan testing.T, terdapat function Fail(), FailNow(), Error(), Fatal() dan lain-lain
- Yang membedakan, ada beberapa attribute dan function tambahan yang digunakan untuk melakukan benchmark
- Salah satunya adalah attribute N, ini digunakan untuk melakukan total iterasi sebuah benchmark

# Menjalankan Benchmark
Untuk menjalankan seluruh benchmark di module, kita bisa menggunakan perintah sama seperti test, namun ditambahkan parameter bench :
~ go test -v -bench=.
Jika kita hanya ingin menjalankan benchmark tanpa unit test, kita bisa gunakan perintah :
~ go test -v -run=NotMathUnitTest -bench=.
Kode diatas selain menjalankan benchmark, akan menjalankan unit test juga, jika kita hanya ingin menjalankan benchmark tertentu, kita bisa gunakan perintah :
~ go test -v -run=NotMathUnitTest -bench=BenchmarkTest
Jika kita menjalankan benchmark di root module dan ingin semua module dijalankan, kita bisa gunakan perintah :
~ go test -v -bench=. ./... 
